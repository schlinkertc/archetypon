[
  {
    "objectID": "base_model.html",
    "href": "base_model.html",
    "title": "Base Model",
    "section": "",
    "text": "Add classmethods to Pandas’ DataFrame object to allow for Pydantic validation\n\n\nsource\n\n\n\n DataFrame (data=None, index:Axes|None=None, columns:Axes|None=None,\n            dtype:Dtype|None=None, copy:bool|None=None)\n\nSubclassed from Pandas DataFrame. Includes classmethods used in Pydantic Validation"
  },
  {
    "objectID": "base_model.html#dbt-schema",
    "href": "base_model.html#dbt-schema",
    "title": "Base Model",
    "section": "DBT Schema",
    "text": "DBT Schema\n\nSupport functions to convert Pydantic Model into a DBT Schema\n\n\nsource\n\nBaseModel\n\n BaseModel ()\n\nCustom implementation of Pydantic’s Base Model.\nIncludes _repr_json_ and _repr_html_ methods for nice displays in Jupyter Lab and Jupyter Notebook, respectively.\n\nimport datetime as dt\nfrom pydantic import validator\nfrom dateutil.relativedelta import relativedelta\nfrom pydantic import ValidationError\n\n\nclass Person(BaseModel):\n    name: str\n    dob: dt.date\n    age: Optional[int] \n    \n    @validator('age',always=True)\n    def _validate_age(cls,v,values):\n        difference_in_years = relativedelta(\n            dt.date.today(), \n            values['dob']\n        ).years\n        if v and v!=difference_in_years:\n            raise ValueError(\"You're lying about your age!\")\n        return difference_in_years\n\n\nme = Person(\n    name = 'Humble Chuck',\n    dob = '1994-06-11'\n)\nme\n\n\nnameHumble Chuckdob1994-06-11age28\n\n\n\ntry:\n    me = Person(\n        name = 'Humble Chuck',\n        dob = '1994-06-11',\n        age = 27\n    )\nexcept ValidationError as e:\n    print(e)\n\n1 validation error for Person\nage\n  You're lying about your age! (type=value_error)\n\n\n\nsource\n\n\nGenericModel\n\n GenericModel ()\n\nCustom implementation of Pydantic’s Generic Model.\nIncludes _repr_json_ and _repr_html_ methods for nice displays in Jupyter Lab and Jupyter Notebook, respectively.\n\nclass ModelWithDataFrame(BaseModel):\n    df: DataFrame\n\n\ndata = {\n    'a':[1],\n    'b':[2]\n}\ndataframe = DataFrame(data) \nmodel = ModelWithDataFrame(df=dataframe)\nmodel\n\n\ndfa01b02\n\n\n\nmodel\n\n\ndfa01b02"
  },
  {
    "objectID": "base_model.html#generic-dataframe-model",
    "href": "base_model.html#generic-dataframe-model",
    "title": "Base Model",
    "section": "Generic DataFrame Model",
    "text": "Generic DataFrame Model\n\nAnything passed to ‘data’ will be loaded as a dataframe.\n\n\nsource\n\nDataFrameModel\n\n DataFrameModel (data:~DataFrameT=None)\n\nGeneric DataFrame model. Anything passed to the ‘data’ attribute will be parsed as a DataFrame\n\nfrom pydantic import HttpUrl,Field\nimport pandas as pd\n\n\nclass WFUVRecentlyPlayed(DataFrameModel):\n    \"\"\"A DataFrame of recently played songs from WFUV\"\"\"\n    \n    source:ClassVar[HttpUrl] = \"https://wfuv.org/playlist\"\n    timestamp: dt.datetime = Field(description='The time that the data was collected',default_factory = dt.datetime.now)\n    \n    def __init__(self,*args,**kwargs):\n        data = pd.read_html(self.source)[0]\n        super().__init__(data=data,*args,**kwargs)\n\n\nrecently_played = WFUVRecentlyPlayed()\nrecently_played\n\n\ntitle: WFUVRecentlyPlayed\ndescription: A DataFrame of recently played songs from WFUV\ntimestamp: 2023-02-10 14:02:52.125770DataFrame: \n\n\n  \n    \n      \n      Time\n      Song Title\n      Artist\n    \n  \n  \n    \n      0\n      02/10, 1:38pm\n      The Greatest\n      Cat Power\n    \n    \n      1\n      02/10, 1:31pm\n      Same Ol Mistakes\n      Rihanna\n    \n    \n      2\n      02/10, 1:26pm\n      This Year\n      Emily King\n    \n    \n      3\n      02/10, 1:23pm\n      Part of the Band\n      The 1975\n    \n    \n      4\n      02/10, 1:19pm\n      Disarm\n      Smashing Pumpkins\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      345\n      02/09, 1:16pm\n      Vacation\n      The Go-Go's\n    \n    \n      346\n      02/09, 1:07pm\n      The Payback\n      James Brown\n    \n    \n      347\n      02/09, 1:03pm\n      New Gold\n      Gorillaz\n    \n    \n      348\n      02/09, 1:00pm\n      Modern Girl\n      Sleater-Kinney\n    \n    \n      349\n      02/09, 12:57pm\n      Radio\n      Margo Price ft. Sharon Van Etten\n    \n  \n\n350 rows × 3 columns"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Archetypon",
    "section": "",
    "text": "archetypon (pronounced “archetype on”) is a library that uses Pydantic to validate Pandas Dataframes. It includes some usefull extensions of Pydantic’s BaseModel class display models in Jupyter Notebooks and Jupyter Lab.\nIt’s built using nbdev"
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "Archetypon",
    "section": "Install",
    "text": "Install\npip install archetypon"
  },
  {
    "objectID": "index.html#example",
    "href": "index.html#example",
    "title": "Archetypon",
    "section": "Example",
    "text": "Example"
  },
  {
    "objectID": "string_templating.html",
    "href": "string_templating.html",
    "title": "String Templating",
    "section": "",
    "text": "source\n\nget_formatters_from_string\n\n get_formatters_from_string (input_string:str)\n\n\nf_string = 'I live in {city}, {state}, {country}.'\nassert get_formatters_from_string(f_string) == ['city','state','country']\n\n\nsource\n\n\nstring_to_dict\n\n string_to_dict (string, pattern)\n\n\nmy_string = 'I live in Brooklyn, New York, USA'\nstring_to_dict(my_string,f_string)\n\n{'city': 'Brooklyn', 'state': 'New York', 'country': 'US'}\n\n\n\nsource\n\n\nStringTemplate\n\n StringTemplate (string=None, template:str)\n\nString Template Model.\nDefine the class with a template and fields, and it can parse a string that matches the template into the attributes of the model or accept the attributes and create the string.\nUseful for path operations and partitions.\n\nclass IntroduceMe(StringTemplate):\n    template:str = \"Hi! My name is {first} {last}\"\n    first: str\n    last: str\n\n\nme = IntroduceMe(first='Charlie',last='Schlinkert')\nassert me.string == 'Hi! My name is Charlie Schlinkert'\ndisplay(me)\n\n\nstringHi! My name is Charlie SchlinkerttemplateHi! My name is {first} {last}firstCharlielastSchlinkert\n\n\n\nhb = IntroduceMe.parse_string(\"Hi! My name is Humphry Bogart\")\nassert hb.first == 'Humphry'\nassert hb.last == 'Bogart'\nhb\n\n\nstringHi! My name is Humphry BogarttemplateHi! My name is {first} {last}firstHumphrylastBogart\n\n\nTemplating is pretty strict. Error message could be better here.\n\ntry:\n    IntroduceMe(\"The name's Bond. James Bond\")\nexcept AttributeError as e:\n    print(e)\n\n'NoneType' object has no attribute 'groups'\n\n\n\n\nExample\n\nimport pandas as pd\n\n\ndfs = pd.read_html(\"https://en.wikipedia.org/wiki/List_of_Major_League_Baseball_wins_records\")\ndf = dfs[0]\ndf\n\n\n\n\n\n  \n    \n      \n      American League Pitcher\n      Throws\n      Wins–losses\n      Unnamed: 3\n      National League Pitcher\n      Throws.1\n      Wins–losses.1\n    \n  \n  \n    \n      0\n      Walter Johnson\n      R\n      417–279[2]\n      NaN\n      Christy Mathewson\n      R\n      373–188[3]\n    \n    \n      1\n      Roger Clemens\n      R\n      316–166[4]\n      NaN\n      Grover Cleveland Alexander\n      R\n      373–208[5]\n    \n    \n      2\n      Eddie Plank\n      L\n      305–183[6]\n      NaN\n      Pud Galvin\n      R\n      349–295[7]\n    \n    \n      3\n      Lefty Grove\n      L\n      300–141[8]\n      NaN\n      Warren Spahn\n      L\n      363–245[9]\n    \n    \n      4\n      Early Wynn\n      R\n      300–244[10]\n      NaN\n      Kid Nichols\n      R\n      361–208[11]\n    \n    \n      5\n      Red Ruffing\n      R\n      273–225[12]\n      NaN\n      Greg Maddux\n      R\n      355–227[13]\n    \n    \n      6\n      Mike Mussina\n      R\n      270–153[14]\n      NaN\n      Tim Keefe\n      R\n      342–225[15]\n    \n    \n      7\n      Jim Palmer\n      R\n      268–152[16]\n      NaN\n      John Clarkson\n      R\n      328–178[17]\n    \n    \n      8\n      Bob Feller\n      R\n      266–162[18]\n      NaN\n      Steve Carlton\n      L\n      319–226[19]\n    \n    \n      9\n      Ted Lyons\n      R\n      260–230[20]\n      NaN\n      Mickey Welch\n      R\n      307–210[21]\n    \n  \n\n\n\n\n\nclass WinLoss(StringTemplate):\n    template = \"{wins}–{losses}\\[{footnote}\\]\"\n    wins: int \n    losses: int\n    footnote: str \n\ns = df['Wins–losses'][0]\nprint(s)\n\nWinLoss.parse_string(s)\n\n417–279[2]\n\n\n\nstring417–279\\[2\\]template{wins}–{losses}\\[{footnote}\\]wins417losses279footnote2\n\n\n\ndf.set_index('American League Pitcher')['Wins–losses'].apply(\n    lambda x: WinLoss(x).dict(include={'wins','losses'})\n).apply(pd.Series).head()\n\n\n\n\n\n  \n    \n      \n      wins\n      losses\n    \n    \n      American League Pitcher\n      \n      \n    \n  \n  \n    \n      Walter Johnson\n      417\n      279\n    \n    \n      Roger Clemens\n      316\n      166\n    \n    \n      Eddie Plank\n      305\n      183\n    \n    \n      Lefty Grove\n      300\n      141\n    \n    \n      Early Wynn\n      300\n      244"
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "core",
    "section": "",
    "text": "df=pd.read_csv(\n    \"https://archive.ics.uci.edu/ml/machine-learning-databases/00468/online_shoppers_intention.csv\"\n)\ndf.info()\n\n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 12330 entries, 0 to 12329\nData columns (total 18 columns):\n #   Column                   Non-Null Count  Dtype  \n---  ------                   --------------  -----  \n 0   Administrative           12330 non-null  int64  \n 1   Administrative_Duration  12330 non-null  float64\n 2   Informational            12330 non-null  int64  \n 3   Informational_Duration   12330 non-null  float64\n 4   ProductRelated           12330 non-null  int64  \n 5   ProductRelated_Duration  12330 non-null  float64\n 6   BounceRates              12330 non-null  float64\n 7   ExitRates                12330 non-null  float64\n 8   PageValues               12330 non-null  float64\n 9   SpecialDay               12330 non-null  float64\n 10  Month                    12330 non-null  object \n 11  OperatingSystems         12330 non-null  int64  \n 12  Browser                  12330 non-null  int64  \n 13  Region                   12330 non-null  int64  \n 14  TrafficType              12330 non-null  int64  \n 15  VisitorType              12330 non-null  object \n 16  Weekend                  12330 non-null  bool   \n 17  Revenue                  12330 non-null  bool   \ndtypes: bool(2), float64(7), int64(7), object(2)\nmemory usage: 1.5+ MB\n\n\n\nclass OnlineShoppers(DataFrameModel):\n    pass\n\n\nOnlineShoppers(data=df)\n\n\ntitle: OnlineShoppers\ndescription: Generic DataFrame model. Anything passed to the 'data' attribute will be parsed as a DataFrame\nDataFrame: \n\n\n  \n    \n      \n      Administrative\n      Administrative_Duration\n      Informational\n      Informational_Duration\n      ProductRelated\n      ProductRelated_Duration\n      BounceRates\n      ExitRates\n      PageValues\n      SpecialDay\n      Month\n      OperatingSystems\n      Browser\n      Region\n      TrafficType\n      VisitorType\n      Weekend\n      Revenue\n    \n  \n  \n    \n      0\n      0\n      0.0\n      0\n      0.0\n      1\n      0.000000\n      0.200000\n      0.200000\n      0.000000\n      0.0\n      Feb\n      1\n      1\n      1\n      1\n      Returning_Visitor\n      False\n      False\n    \n    \n      1\n      0\n      0.0\n      0\n      0.0\n      2\n      64.000000\n      0.000000\n      0.100000\n      0.000000\n      0.0\n      Feb\n      2\n      2\n      1\n      2\n      Returning_Visitor\n      False\n      False\n    \n    \n      2\n      0\n      0.0\n      0\n      0.0\n      1\n      0.000000\n      0.200000\n      0.200000\n      0.000000\n      0.0\n      Feb\n      4\n      1\n      9\n      3\n      Returning_Visitor\n      False\n      False\n    \n    \n      3\n      0\n      0.0\n      0\n      0.0\n      2\n      2.666667\n      0.050000\n      0.140000\n      0.000000\n      0.0\n      Feb\n      3\n      2\n      2\n      4\n      Returning_Visitor\n      False\n      False\n    \n    \n      4\n      0\n      0.0\n      0\n      0.0\n      10\n      627.500000\n      0.020000\n      0.050000\n      0.000000\n      0.0\n      Feb\n      3\n      3\n      1\n      4\n      Returning_Visitor\n      True\n      False\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      12325\n      3\n      145.0\n      0\n      0.0\n      53\n      1783.791667\n      0.007143\n      0.029031\n      12.241717\n      0.0\n      Dec\n      4\n      6\n      1\n      1\n      Returning_Visitor\n      True\n      False\n    \n    \n      12326\n      0\n      0.0\n      0\n      0.0\n      5\n      465.750000\n      0.000000\n      0.021333\n      0.000000\n      0.0\n      Nov\n      3\n      2\n      1\n      8\n      Returning_Visitor\n      True\n      False\n    \n    \n      12327\n      0\n      0.0\n      0\n      0.0\n      6\n      184.250000\n      0.083333\n      0.086667\n      0.000000\n      0.0\n      Nov\n      3\n      2\n      1\n      13\n      Returning_Visitor\n      True\n      False\n    \n    \n      12328\n      4\n      75.0\n      0\n      0.0\n      15\n      346.000000\n      0.000000\n      0.021053\n      0.000000\n      0.0\n      Nov\n      2\n      2\n      3\n      11\n      Returning_Visitor\n      False\n      False\n    \n    \n      12329\n      0\n      0.0\n      0\n      0.0\n      3\n      21.250000\n      0.000000\n      0.066667\n      0.000000\n      0.0\n      Nov\n      3\n      2\n      1\n      2\n      New_Visitor\n      True\n      False\n    \n  \n\n12330 rows × 18 columns"
  },
  {
    "objectID": "delegates.html",
    "href": "delegates.html",
    "title": "Delegation",
    "section": "",
    "text": "source\n\ndelegates\n\n delegates (to=None, keep=False)\n\nDecorator: replace **kwargs in signature with params from to"
  },
  {
    "objectID": "formatting.html",
    "href": "formatting.html",
    "title": "Formatting",
    "section": "",
    "text": "source\n\n\n\n\n format_factory (string_or_callable:~FormatterT, null_format:str='',\n                 **kwargs)\n\nReturns a function factory to format a given value.\n\ncommas = format_factory(\"{:,.0f}\")\nassert commas(1234.0) == '1,234'\n\n\ndef convert_snake_case(string:str,title:bool=False)->str:\n    formatted = \" \".join(x for x in string.split('_'))\n    if title:\n        return formatted.title()\n    return formatted\n\nsnake_to_title = format_factory(convert_snake_case,title=True)\nassert snake_to_title(\"snake_case\") == \"Snake Case\"\n\n\n\n\n\nsource\n\n\n\n\n big_number (num:float, decimal_places:int=2)\n\n\nsource\n\n\n\n\n big_dollars (num:float, decimal_places:int=2)\n\n\nsource\n\n\n\n\n as_multiple (num:float)\n\n\nassert big_number(1e6) == '1.00M'\nassert big_number(1234567)=='1.23M'\n\nassert big_dollars(1e6)=='$1.00M'\nassert big_dollars(1234567891) == '$1.23B'\n\nassert as_multiple(1.2) == \"1.20x\"\n\n\nsource\n\n\n\n\n format_minutes (time:float)\n\nTakes in minutes as a float and converts to MM:SS\n\n\n\n\nsource\n\n\n\n\n Formatter (null_format:str='', dollars_format:~FormatterT='${:,.0f}',\n            percent_format:~FormatterT='{:.0%}',\n            percent2dp_format:~FormatterT='{:.2%}',\n            number_format:~FormatterT='{:,.0f}',\n            small_number_format:~FormatterT='{:.2f}',\n            big_number_format:~FormatterT=<function big_number>,\n            big_dollars_format:~FormatterT=<function big_dollars>,\n            multiple_format:~FormatterT=<function as_multiple>,\n            minutes_format:~FormatterT=<function format_minutes>,\n            **kwargs)\n\nA customizable object for applying string formats.\nAny additional attributes passed during instantion must have a name ending in “_format”. Values can be either a formattable string (e.g. “{:.0f}”) or a callable.\n\n\n\nfmt = Formatter(\n    # adding custom formats\n    date_format = lambda x: pd.Timestamp(x).strftime('%b %d %Y'),\n    month_format = \"{:%b %Y}\",\n    millions_format = lambda x: \"{:.0f}mm\".format(x/1e6),\n)\n\n\n\nassert fmt.big_dollars(1234567) == big_dollars(1234567) == '$1.23M'\nassert fmt.multiple(1.22999)=='1.23x'\nassert fmt.percent(.0123)==\"1%\"\nassert fmt.percent2dp(.0123)==\"1.23%\"\nassert fmt.date('20220212')=='Feb 12 2022'\nassert fmt.month(dt.date(1994,6,11))=='Jun 1994'\nassert fmt.minutes(60.5)==\"60:30\"\nassert fmt.millions(123456789) == \"123mm\"\n\n\n\n\nThe null_format attribute of the Formatter object is a string that gets returned when any method is called on a null value.\nBy default, nulls are represented as empty strings\n\nimport numpy as np\n\n\nassert fmt.big_dollars(np.nan)==fmt.number(np.nan)==''==fmt.null_format\n\nFormatter will treat empty strings as null.\n\nassert fmt.percent('')==fmt.null_format\n\n\ncustom_null_format = \"I'm a null value!\"\nfmt_custom_null = Formatter(null_format=custom_null_format)\nassert fmt_custom_null.big_number(np.nan)==fmt_custom_null.number(np.nan)==custom_null_format\n\nOverride default implementation at instantiation:\n\nfmt_custom_dollars = Formatter(\n    dollars_format=\"${:,.2f}\"\n)\nassert fmt_custom_dollars.dollars(12345.678) == \"$12,345.68\"\n\n\nfmt_custom = Formatter(\n    snake_format = convert_snake_case\n)\nfmt_custom.snake(\"snake_case\")\n\n'snake case'\n\n\n\n# if you need to pass arguments to the function factory \nfmt_custom_with_kwargs = Formatter(\n    snake_to_camel_format = (\n        convert_snake_case,{'title':True}\n    ),\n    big_dollars_format = (\n        big_dollars,\n        {'decimal_places':4}\n    )\n)\nassert fmt_custom_with_kwargs.snake_to_camel(\"snake_case\")=='Snake Case'\n\n\nassert fmt_custom.big_dollars(1.234e9)=='$1.23B'\nassert fmt_custom_with_kwargs.big_dollars(1.1234e9)=='$1.1234B'"
  },
  {
    "objectID": "record_validation.html",
    "href": "record_validation.html",
    "title": "Record Validation",
    "section": "",
    "text": "import datetime as dt\n\n\nclass Model(BaseModel):\n    number: int\n    string: str \n    date: dt.date\n    \ndataframe = pd.DataFrame({\n    'number':['1',2,3e0],\n    'string':['a','b',3],\n    'date':['1994-06-11',dt.date.today(),dt.datetime.today()],\n},dtype='object')\ndisplay(dataframe)\ndataframe.dtypes\n\n\n\n\n\n  \n    \n      \n      number\n      string\n      date\n    \n  \n  \n    \n      0\n      1\n      a\n      1994-06-11\n    \n    \n      1\n      2\n      b\n      2023-03-16\n    \n    \n      2\n      3.0\n      3\n      2023-03-16 12:43:32.075287\n    \n  \n\n\n\n\nnumber    object\nstring    object\ndate      object\ndtype: object\n\n\n\nvalidated = parse_dataframe_rows_as(Model,dataframe)\ndisplay(validated)\nvalidated.dtypes\n\n\n\n\n\n  \n    \n      \n      number\n      string\n      date\n    \n  \n  \n    \n      0\n      1\n      a\n      1994-06-11\n    \n    \n      1\n      2\n      b\n      2023-03-16\n    \n    \n      2\n      3\n      3\n      2023-03-16\n    \n  \n\n\n\n\nnumber     int64\nstring    object\ndate      object\ndtype: object\n\n\n\nTo Do: Find a way to return the index of the erros in the ValidationError\n\n\nbad_dataframe = pd.DataFrame({\n    'number':['a',1,'b'],\n    'string':dataframe['string'],\n    'date':dataframe['date'],\n},dtype='object')\ntry:\n    df = parse_dataframe_rows_as(Model,bad_dataframe)\n    display(df)\nexcept ValidationError as e:\n    print(e)\n\n2 validation errors for Model\n__root__ -> number\n  value is not a valid integer (type=type_error.integer)\n__root__ -> number\n  value is not a valid integer (type=type_error.integer)\n\n\n\nsource\n\nrecord_model\n\n record_model (kls)\n\nDecorator to make a pydantic model into a RecordFrame, i.e. a DataFrame validated by row.\n\nclass ModelWithConstrainedFrame(BaseModel):\n    df: RecordFrame[Model]\n\n\nModelWithConstrainedFrame(df=dataframe)\n\n\ndfnumber011223string0a1b23date01994-06-11T00:00:00.00012023-03-16T00:00:00.00022023-03-16T00:00:00.000\n\n\n\n\nExample: Recently Played Songs on WFUV\n\nfrom archetypon.base_model import DataFrameModel\nfrom pydantic import Field\nfrom pydantic import HttpUrl,Field\nimport pandas as pd\n\n\n@record_model\nclass Song(BaseModel):\n    time: str = Field(alias='Time')\n    song_title: str = Field(alias='Song Title')\n    artist: Optional[str] = Field(alias='Artist')\n\n\nclass WFUVRecentlyPlayed(DataFrameModel[Song]):\n    \"\"\"A DataFrame of recently played songs from WFUV\"\"\"\n    \n    source:ClassVar[HttpUrl] = \"https://wfuv.org/playlist\"\n    timestamp: dt.datetime = Field(description='The time that the data was collected',default_factory = dt.datetime.now)\n    \n    def __init__(self,*args,**kwargs):\n        data = pd.read_html(self.source)[0]\n        super().__init__(data=data,*args,**kwargs)\n\n\nrecently_played = WFUVRecentlyPlayed()\nrecently_played\n\n\ntitle: WFUVRecentlyPlayed\ndescription: A DataFrame of recently played songs from WFUV\ntimestamp: 2023-03-16 13:06:40.230841DataFrame: \n\n\n  \n    \n      \n      time\n      song_title\n      artist\n    \n  \n  \n    \n      0\n      03/16, 1:00pm\n      Take Me Down\n      Gary Clark Jr\n    \n    \n      1\n      03/16, 12:56pm\n      Pink Roses\n      Say She She\n    \n    \n      2\n      03/16, 12:51pm\n      I Believe (When I Fall In Love It Will B\n      Stevie Wonder\n    \n    \n      3\n      03/16, 12:47pm\n      Seven Nation Army\n      The White Stripes\n    \n    \n      4\n      03/16, 12:40pm\n      Over\n      CHVRCHES\n    \n    \n      ...\n      ...\n      ...\n      ...\n    \n    \n      345\n      03/15, 12:09pm\n      Oh Tell Me\n      Mayqueen\n    \n    \n      346\n      03/15, 12:08pm\n      New York Slice jingle\n      Ren With the Mane\n    \n    \n      347\n      03/15, 12:04pm\n      Weightless\n      Arlo Parks\n    \n    \n      348\n      03/15, 12:00pm\n      Head Full Of Doubt/Road Full Of Promise\n      The Avett Brothers\n    \n    \n      349\n      03/15, 11:56am\n      Cello Song\n      Fontaines D.C.\n    \n  \n\n350 rows × 3 columns\n\n\n\n\nassert type(recently_played.data)==pd.DataFrame"
  },
  {
    "objectID": "database.html",
    "href": "database.html",
    "title": "Databases",
    "section": "",
    "text": "source"
  },
  {
    "objectID": "database.html#sqlite-example",
    "href": "database.html#sqlite-example",
    "title": "Databases",
    "section": "SQLite Example",
    "text": "SQLite Example\n\nimport pandas as pd\nimport os\nimport sqlalchemy\n\n\nsqlalchemy.__version__\n\n'1.4.46'\n\n\n\nclass SQLiteDB(Database):\n    drivername='sqlite'\n    database='test.db'\n\ndb = SQLiteDB()\n\nusers = pd.DataFrame({\n    'id':[1,2,3],\n    'user':['larry','moe','curly']\n})\n\nusers.to_sql('users',db.engine,if_exists='replace',index=False)\n\nqueried = db.query_to_df(\"select * from users\")\nassert queried.equals(users)\nos.remove('test.db')\n\n\n!nbdev_export"
  }
]